---
# Playbook to setup server

- name: Update apt
  apt:
      update_cache: yes

- name: Add ondrej/php PPA repository
  apt_repository:
      repo: "ppa:ondrej/php"
      state: present
      update_cache: yes

- name: Install required packages
  apt:
      name:
          - git
          - php8.2
          - php8.2-mysql
          - php8.2-xml
          - php8.2-mbstring
          - php8.2-pgsql
          - php8.2-curl
          - curl
          - unzip
          - apache2
          - libapache2-mod-php8.2
      state: present

- name: Download Composer installer
  get_url:
      url: https://getcomposer.org/installer
      dest: /tmp/composer-setup.php

- name: Run Composer installer
  command: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer

# - name: Add gpg key for nodejs
#   apt_key:
#       url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
#       state: present
#
- name: Add nodejs repo
  apt_repository:
      repo: "deb https://deb.nodesource.com/node_{{ node_version }} {{ ansible_distribution_release }} main"
      state: present
      update_cache: yes

- name: Install nodejs
  apt:
      name: nodejs
      state: present

- name: Delete project directory
  file:
      state: absent
      path: "{{ project_directory }}"

- name: Clone project
  git:
      repo: "{{ repo_url }}"
      dest: "./temp_proj"
      clone: yes
      update: yes
      version: main
  become: false

- name: Transfer to permanent location
  copy:
      src: "./temp_proj/"
      dest: "{{ project_directory }}"

- name: Set owner and permissions for project directory
  file:
      dest: "{{ project_directory }}"
      owner: "www-data"
      group: "www-data"
      mode: "755"
      recurse: yes

- name: Update DocumentRoot
  lineinfile:
      path: /etc/apache2/sites-available/000-default.conf
      regexp: "^.*DocumentRoot.*"
      line: "DocumentRoot {{ project_directory }}/public"

# - name: Modify apache2.conf
#   replace:
#       path: /etc/apache2/apache2.conf
#       regexp: |
#           (<Directory /var/www/>
#           \s*Options Indexes FollowSymLinks
#           \s*AllowOverride) None
#       replace: |
#           \1 All

- name: Modify apache2.conf
  template:
    src: templates/apache2.conf.j2
    dest: /etc/apache2/apache2.conf
    owner: root
    group: root
    mode: 0644

- name: Copy .env.example to .env
  command: cp {{ project_directory }}/.env.example {{ project_directory }}/.env

- name: Replace database configuration in .env file
  template:
    src: templates/env.j2
    dest: "{{ project_directory }}/.env"
    owner: www-data
    group: www-data
    mode: 0644

# - name: Replace database configuration in .env file
#   replace:
#       path: "{{ project_directory }}/.env"
#       regexp: |
#           DB_CONNECTION=.*
#           DB_HOST=.*
#           DB_PORT=.*
#           DB_DATABASE=.*
#           DB_USERNAME=.*
#           DB_PASSWORD=.*
#       replace: |
#           DB_CONNECTION=pgsql
#           DB_HOST={{ db_host }}
#           DB_PORT=5432
#           DB_DATABASE={{ db_name }}
#           DB_USERNAME={{ db_user }}
#           DB_PASSWORD={{ db_pass }}

- name: Install PHP dependencies
  command: composer install
  environment:
      COMPOSER_ALLOW_SUPERUSER: 1
  args:
      chdir: "{{ project_directory }}"

- name: Set the application key
  command: php artisan key:generate
  args:
      chdir: "{{ project_directory }}"

- name: config:cache
  command: php artisan config:cache
  args:
      chdir: "{{ project_directory }}"

- name: Make database migrations
  command: php artisan migrate --force
  args:
      chdir: "{{ project_directory }}"

- name: Install Node.js dependencies
  command: npm install
  args:
      chdir: "{{ project_directory }}"

- name: Build the assets using npm
  command: npm run build
  args:
      chdir: "{{ project_directory }}"

- name: a2enmod rewrite
  command: a2enmod rewrite
  notify: Restart and enable apache2

